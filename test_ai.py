#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è AI —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
"""

import os
import sys
import django
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Django
sys.path.append(os.path.join(os.path.dirname(__file__), 'tutor_crm'))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'tutor_crm.settings')
django.setup()

from tutor_crm.core.models import Student
from tutor_crm.core.ai_services import AITutorService

def test_ai_functionality():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç AI —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å"""
    print("ü§ñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ AI —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º API –∫–ª—é—á
    api_key = os.getenv('OPENAI_API_KEY')
    if not api_key:
        print("‚ùå OPENAI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        print("–°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env —Å –≤–∞—à–∏–º API –∫–ª—é—á–æ–º:")
        print("OPENAI_API_KEY=your_key_here")
        return False
    
    print("‚úÖ API –∫–ª—é—á –Ω–∞–π–¥–µ–Ω")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É—á–µ–Ω–∏–∫–∞
    student, created = Student.objects.get_or_create(
        name="–¢–µ—Å—Ç–æ–≤—ã–π —É—á–µ–Ω–∏–∫",
        defaults={
            'phone': '+7 999 123-45-67',
            'email': 'test@example.com',
            'school': '–¢–µ—Å—Ç–æ–≤–∞—è —à–∫–æ–ª–∞',
            'grade': '9 –∫–ª–∞—Å—Å',
            'goal': '–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –û–ì–≠ –ø–æ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ',
            'notes': '–•–æ—Ä–æ—à–æ —É—Å–≤–∞–∏–≤–∞–µ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª, –Ω—É–∂–Ω–∞ –ø—Ä–∞–∫—Ç–∏–∫–∞'
        }
    )
    
    if created:
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π —É—á–µ–Ω–∏–∫: {student.name}")
    else:
        print(f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —É—á–µ–Ω–∏–∫: {student.name}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º AI —Å–µ—Ä–≤–∏—Å
    ai_service = AITutorService()
    
    print("\nüìã –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —É—Ä–æ–∫–∞...")
    result = ai_service.plan_lesson(student, "–ö–≤–∞–¥—Ä–∞—Ç–Ω—ã–µ —É—Ä–∞–≤–Ω–µ–Ω–∏—è", 60)
    
    if result['success']:
        print("‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Ä–æ–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        plan = result['plan']
        print(f"   –ù–∞–∑–≤–∞–Ω–∏–µ: {plan.get('title', 'N/A')}")
        print(f"   –¶–µ–ª–∏: {len(plan.get('objectives', []))}")
        print(f"   –°—Ç—Ä—É–∫—Ç—É—Ä–∞: {len(plan.get('structure', []))} —ç—Ç–∞–ø–æ–≤")
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {result['error']}")
    
    print("\nüìù –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è...")
    result = ai_service.generate_homework(student, "–ö–≤–∞–¥—Ä–∞—Ç–Ω—ã–µ —É—Ä–∞–≤–Ω–µ–Ω–∏—è", "medium")
    
    if result['success']:
        print("‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –î–ó —Ä–∞–±–æ—Ç–∞–µ—Ç")
        homework = result['homework']
        print(f"   –ù–∞–∑–≤–∞–Ω–∏–µ: {homework.get('title', 'N/A')}")
        print(f"   –ó–∞–¥–∞–Ω–∏–π: {len(homework.get('tasks', []))}")
        print(f"   –í—Ä–µ–º—è: {homework.get('estimated_time', 'N/A')}")
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –î–ó: {result['error']}")
    
    print("\nüìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞...")
    result = ai_service.analyze_student_progress(student)
    
    if result['success']:
        print("‚úÖ –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        analysis = result['analysis']
        print(f"   –°–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã: {len(analysis.get('strengths', []))}")
        print(f"   –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: {len(analysis.get('recommendations', []))}")
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {result['error']}")
    
    print("\n" + "=" * 50)
    print("üéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    
    return True

if __name__ == "__main__":
    test_ai_functionality() 